(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory(require("dot-prop")):typeof define==="function"&&define.amd?define(["dot-prop"],factory):(global=global||self,global.index=factory(global.dotProp))})(this,function(dotProp){"use strict";dotProp=dotProp&&dotProp.hasOwnProperty("default")?dotProp["default"]:dotProp;const flat=arrs=>[].concat.apply([],arrs);const getPaths=(obj,path="")=>{if(["bool","string","number"].includes(typeof obj)){return[null]}if(typeof obj==="object"||Array.isArray(obj)){return flat(Object.keys(obj).map(k=>getPaths(obj[k],k).map(sub=>sub?k+"."+sub:k)))}};const pick=arr=>arr[Math.floor(Math.random()*arr.length)];const values={string:()=>pick(["hello","world","how","are","you"]),boolean:()=>pick([true,false]),number:()=>Math.floor(Math.random()*1e4)};const rotate=val=>{const dest=pick(Object.keys(values).filter(type=>type!==typeof val));return values[dest]()};var index=(obj,level=100)=>{const cloned=JSON.parse(JSON.stringify(obj));const paths=getPaths(obj);for(let i=0;i<level;i++){const path=pick(paths);if(!path)continue;paths.splice(paths.indexOf(path),1);const val=dotProp.get(cloned,path);dotProp.set(cloned,path,rotate(val))}return cloned};return index});